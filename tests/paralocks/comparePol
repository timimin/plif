
comparePol (p1, p2) ==
    
    \\ локальная функция сравнения двух предложений
    
    LET compareClause (c1, c2) == 
    
        \\ Проверяется переменная предиката Flow(*) из с1. 
        \\ Если для это переменной задана подстановка, то осуществляем замену и сравниваем с соответствующей переменной Flow(*) из с2. 
    
        /\ IF c1[1] \in DOMAIN (substMap3 (c1, c2))
                THEN substMap3 (c1, c2)[c1[1]] = c2[1] 
                
                \\ в противном случае просто сравниваем c1[1] = c2[1]
                 
                ELSE c1[1] = c2[1] 
        
        \\ Проверяем, что требования к соответствующим непараметрическим блокировкам не предъявляются (NONE) в обоих предложениях с1 и с2
        \\ или предъявляются в с2
        
        /\ \A k \in E0 : \/ c1[2][1][k] = c2[2][1][k]
                         \/ c2[2][1][k] = {}
                         
        \\ Проверяем, что для каждой непараметрической блокировки Rn множество переменных из с1 после замены является подмножеством множества переменных из с2
        
        /\ \A z \in E1 : 
                \/ c1[2][2][z] = {NONE}
                \/ ReduceSet(LAMBDA x, y: 
                        IF y \in DOMAIN (substMap3 (c1, c2))
                            THEN x \cup {substMap3 (c1, c2)[y]}
                            ELSE x \cup {y}
                                      ,{}, c1[2][2][z]) 
                        \in SUBSET(c2[2][2][z])
    IN \A c2 \in p2 : (\E c1 \in p1 : compareClause (c1, c2))


---------------------------------------------------------------------------------------------------------------------------------------------

/* вторая политика имеет более строгие требования к блокировкам role1, поскольку {"alex"} \subseteq {"alex", "bob"} = true

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"x"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex", "bob"}, role2 |-> {"x"}]>>>>})

RES:

TRUE

--------------------------------------------------------------------------------------------------------------------------------------------

/* вторая политика имеет более строгие требования к блокировкам role1, поскольку {"y"} и {"alex"} могут быть унифицированы при y = alex

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"y"}, role2 |-> {"x"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"x"}]>>>>})
RES:

TRUE

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"x"}, role2 |-> {"x"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"x"}]>>>>})
RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"x"}, role2 |-> {"x"}]>>>>,
             <<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"bob"}]>>>>},
            {<<"y", <<[working_hours |-> {}], [role1 |-> {"y", "alex"}, role2 |-> {"y", "bob"}]>>>>}) 

RES:

TRUE

--------------------------------------------------------------------------------------------------------------------------------------------


comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"x"}, role2 |-> {"x"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"bob"}]>>>>,
             <<"alex", <<[working_hours |-> {}], [role1 |-> {"NONE"}, role2 |-> {"alex"}]>>>>})

RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"y"}, role2 |-> {"z"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"bob"}]>>>>,
             <<"alex", <<[working_hours |-> {}], [role1 |-> {"k"}, role2 |-> {"y"}]>>>>})

RES:

TRUE

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"y"}, role2 |-> {"z"}]>>>>},
            {<<"x", <<[working_hours |-> {}], [role1 |-> {"alex"}, role2 |-> {"bob"}]>>>>,
             <<"alex", <<[working_hours |-> {}], [role1 |-> {"NONE"}, role2 |-> {"y"}]>>>>})

RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"x", <<[working_hours |-> {"NONE"}], [role1 |-> {"x","bob"}, role2 |-> {"x", "alex"}]>>>>},
            {<<"alex", <<[working_hours |-> {"NONE"}], [role1 |-> {"alex", "bob"}, role2 |-> {"alex"}]>>>>,
             <<"bob", <<[working_hours |-> {}], [role1 |-> {"alex", "bob"}, role2 |-> {"bob", "alex"}]>>>>})

RES:

TRUE

comparePol ({<<"x", <<[working_hours |-> {}], [role1 |-> {"x","bob"}, role2 |-> {"x", "alex"}]>>>>},
            {<<"alex", <<[working_hours |-> {"NONE"}], [role1 |-> {"alex", "bob"}, role2 |-> {"alex"}]>>>>,
             <<"bob", <<[working_hours |-> {"NONE"}], [role1 |-> {"alex", "bob"}, role2 |-> {"bob", "alex"}]>>>>})
             
RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"x", <<[working_hours |-> {"NONE"}], [role1 |-> {"x","bob"}, role2 |-> {"x", "alex"}]>>>>},
            {<<"alex", <<[working_hours |-> {"NONE"}], [role1 |-> {"alex", "bob"}, role2 |-> {"alex"}]>>>>,
             <<"bob", <<[working_hours |-> {}], [role1 |-> {"alex", "bob"}, role2 |-> {"bob"}]>>>>})

RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"bob", <<[working_hours |-> {}], [role1 |-> {"z"}, role2 |-> {"z"}]>>>>},
            {<<"bob", <<[working_hours |-> {}], [role1 |-> {"y","alex"}, role2 |-> {"k"}]>>>>})
            
RES:

FALSE

--------------------------------------------------------------------------------------------------------------------------------------------

comparePol ({<<"bob", <<[working_hours |-> {}], [role1 |-> {"z"}, role2 |-> {"t"}]>>>>},
            {<<"bob", <<[working_hours |-> {}], [role1 |-> {"y","alex"}, role2 |-> {"k"}]>>>>})
            
RES:

TRUE






